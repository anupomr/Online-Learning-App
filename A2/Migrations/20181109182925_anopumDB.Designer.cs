// <auto-generated />
using A2.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace A2.Migrations
{
    [DbContext(typeof(AWSDSContext))]
    [Migration("20181109182925_anopumDB")]
    partial class anopumDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("A2.Models.Appoinment", b =>
                {
                    b.Property<string>("AppoinmentId")
                        .HasColumnName("AppoinmentID")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("AppoinmentCoz")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("AppoinmentDate")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("AppoinmentTime")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnName("StudentID")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("TeacherId")
                        .IsRequired()
                        .HasColumnName("TeacherID")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("AppoinmentId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Appoinment");
                });

            modelBuilder.Entity("A2.Models.Course", b =>
                {
                    b.Property<string>("CourseCode")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("CourseTitle")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnName("StudentID")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("TeacherId")
                        .IsRequired()
                        .HasColumnName("TeacherID")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("CourseCode");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("A2.Models.Login", b =>
                {
                    b.Property<string>("LoginName")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.HasKey("LoginName");

                    b.ToTable("Login");
                });

            modelBuilder.Entity("A2.Models.Rating", b =>
                {
                    b.Property<string>("RatingId")
                        .HasColumnName("RatingID")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("Comment")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnName("StudentID")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("RatingId");

                    b.HasIndex("StudentId");

                    b.ToTable("Rating");
                });

            modelBuilder.Entity("A2.Models.Student", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnName("StudentID")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Program")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.HasKey("StudentId");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("A2.Models.Teacher", b =>
                {
                    b.Property<string>("TeacherId")
                        .HasColumnName("TeacherID")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("School")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("TeacherResume")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("TeacherId");

                    b.ToTable("Teacher");
                });

            modelBuilder.Entity("A2.Models.Appoinment", b =>
                {
                    b.HasOne("A2.Models.Student", "Student")
                        .WithMany("Appoinment")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_Appoinment_Student");

                    b.HasOne("A2.Models.Teacher", "Teacher")
                        .WithMany("Appoinment")
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("FK_Appoinment_Teacher");
                });

            modelBuilder.Entity("A2.Models.Course", b =>
                {
                    b.HasOne("A2.Models.Student", "Student")
                        .WithMany("Course")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_Course_Student");

                    b.HasOne("A2.Models.Teacher", "Teacher")
                        .WithMany("Course")
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("FK_Course_Teacher");
                });

            modelBuilder.Entity("A2.Models.Login", b =>
                {
                    b.HasOne("A2.Models.Student", "LoginNameNavigation")
                        .WithOne("Login")
                        .HasForeignKey("A2.Models.Login", "LoginName")
                        .HasConstraintName("FK_Login_Student");
                });

            modelBuilder.Entity("A2.Models.Rating", b =>
                {
                    b.HasOne("A2.Models.Student", "Student")
                        .WithMany("Rating")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_Rating_Student");
                });
#pragma warning restore 612, 618
        }
    }
}
